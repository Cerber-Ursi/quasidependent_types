error[E0283]: type annotations needed for `(N, dependent_vect::Vect<T, N>)`
  --> $DIR/collect.rs:4:13
   |
4  |     let _ = collect(vec![]);
   |         -   ^^^^^^^
   |         |   |
   |         |   cannot infer type for type parameter `N` declared on the function `collect`
   |         |   help: consider specifying the type arguments in the function call: `collect::<Item, N, N2, I>`
   |         consider giving this pattern the explicit type `(N, dependent_vect::Vect<T, N>)`, where the type parameter `N` is specified
   | 
  ::: $WORKSPACE/dependent_vect/src/lib.rs:25:32
   |
25 | pub fn collect<Item: Clone, N: Nat, N2: Nat + From<N>, I: IntoIterator<Item = Item>>(
   |                                --- required by this bound in `dependent_vect::collect`
   |
   = note: cannot resolve `_: dependent_nat::timestamped::nat::Nat`

error[E0283]: type annotations needed
  --> $DIR/collect.rs:9:9
   |
9  |     v = collect(vec![1]).1;
   |         ^^^^^^^
   |         |
   |         cannot infer type for type parameter `N2` declared on the function `collect`
   |         help: consider specifying the type arguments in the function call: `collect::<Item, N, N2, I>`
   | 
  ::: $WORKSPACE/dependent_vect/src/lib.rs:25:47
   |
25 | pub fn collect<Item: Clone, N: Nat, N2: Nat + From<N>, I: IntoIterator<Item = Item>>(
   |                                               ------- required by this bound in `dependent_vect::collect`
   |
   = note: cannot resolve `_: std::convert::From<test_2::N>`
